/* eslint-disable no-restricted-globals */

import {clientsClaim} from 'workbox-core';
import moment from "moment/moment";


// eslint-disable-next-line no-undef
importScripts('https://storage.googleapis.com/workbox-cdn/releases/6.5.3/workbox-sw.js');

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
// precacheAndRoute(self.__WB_MANIFEST);
// FIXME: Reenable precaching, it's a pain in the ass right now with handling injection of env into html.
const ignored = self.__WB_MANIFEST;

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
// registerRoute(
//   // Return false to exempt requests from being fulfilled by index.html.
//   ({ request, url }) => {
//     // If this isn't a navigation, skip.
//     if (request.mode !== 'navigate') {
//       return false;
//     } // If this is a URL that starts with /_, skip.
//
//     if (url.pathname.startsWith('/_')) {
//       return false;
//     } // If this looks like a URL for a resource, because it contains // a file extension, skip.
//
//     if (url.pathname.match(fileExtensionRegexp)) {
//       return false;
//     } // Return true to signal that we want to use the handler.
//
//     return true;
//   },
//   createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
// );

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
// registerRoute(
//   // Add in any other file extensions or routing criteria as needed.
//   ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
//   new StaleWhileRevalidate({
//     cacheName: 'images',
//     plugins: [
//       // Ensure that once this runtime cache reaches a maximum size the
//       // least-recently used images are removed.
//       new ExpirationPlugin({ maxEntries: 50 }),
//     ],
//   })
// );


self.addEventListener('message', (event) => {
    console.log("message received", JSON.stringify(event.data));
    if (event.data)
        switch (event.data.type) {
            case 'SKIP_WAITING':
                self.skipWaiting();
                break;
            case 'LOAD_STATE':
                console.log("Loading data");
                loadData().then(data => {
                    console.log("Loaded data")
                    event.ports[0].postMessage(data);
                    if (true) {
                        data = JSON.parse(data);
                        let numberTasksDue = 0;
                        for (const list of Object.values(data?.tasks?.taskLists || {})) {
                            numberTasksDue += list.tasks.length;
                        }

                        const expiredItems = (data?.kitchen?.pantry?.items || []).filter(item => {
                            return (item.expiration ? moment(item.expiration).diff(moment(), "days") : 9999) <= 0;
                        }).length;
                        const expiringItems = (data?.kitchen?.pantry?.items || []).filter(item => {
                            var remainingTime = (item.expiration ? moment(item.expiration).diff(moment(), "days") : 9999);
                            return remainingTime <= 3 && remainingTime > 0;
                        }).length;

                        console.log("Sending notifications")
                        self.clients.matchAll({
                            includeUncontrolled: true
                        }).then((clients) => {
                            console.log("Notifying " + clients.length + " clients");
                            if (numberTasksDue > 0) {
                                // eslint-disable-next-line no-undef
                                clients.forEach(client => {
                                    client.postMessage({
                                        type: "ALERT",
                                        payload: JSON.stringify({
                                            message: `${numberTasksDue} task(s) due today.`,
                                            type: "warning"
                                        }),
                                    })
                                });
                            }

                            if (expiredItems > 0) {
                                clients.forEach(client => {
                                    client.postMessage({
                                        type: "ALERT",
                                        payload: JSON.stringify({
                                            message: `${expiredItems} items(s) have expired!`,
                                            type: "error"
                                        }),
                                    })
                                });
                            }

                            if (expiringItems > 0) {
                                // eslint-disable-next-line no-undef
                                clients.forEach(client => {
                                    client.postMessage({
                                        type: "ALERT",
                                        payload: JSON.stringify({
                                            message: `${expiringItems} items(s) expiring soon.`,
                                            type: "warning"
                                        }),
                                    });
                                })
                            }
                        });
                    }
                }, err => console.error(err));

                break;
            case 'SAVE_STATE':
                console.log("Saving data");
                save(event.data.state);
                break;
            case 'SHOW_NOTIFICATION':
                // eslint-disable-next-line no-undef
                registration.showNotification("Test Task", {
                    body: "Hello World",
                    requireInteraction: true,
                    actions: [
                        {action: "complete", title: "Complete"},
                        {action: "snooze", title: "Snooze"},
                        {action: "cancel", title: "Cancel"}
                    ],
                    tag: "Hello World"
                });
                break;
        }
});

self.addEventListener('activate', (event) => {
    console.log("activated");
});

self.addEventListener('install', (event) => {
    console.log("installed");
});

self.addEventListener('notificationclick', event => {
    console.log("Notification click");
})

self.addEventListener('notificationclose', event => {
    console.log("Notification close");
})

// Any other custom service worker logic can go here.
// TODO: Background timers don't work offline in pwa right now!

function save(data) {
    console.log("Doing save")
    return dbOpen().then(db => {
        console.log("Starting save transaction")
        const tx = db.transaction("state", "readwrite");
        tx.oncomplete = (() => {
            console.log("Save transaction done")
        });
        tx.onabort = (() => {
            console.log("Save transaction aborted")
        });
        tx.onerror = (() => {
            console.log("Save transaction error")
        });
        const store = tx.objectStore("state");
        console.log("Putting into db");
        store.put({id: 1, state: data});
    }, err => console.error(err.message));
}

function loadData() {
    return dbOpen().then(async (db) => {
        console.log("Starting load transaction")
        const tx = db.transaction("state", "readonly");
        tx.oncomplete = (() => {
            console.log("Load transaction done")
        });
        tx.onabort = (() => {
           console.log("Load transaction aborted")
        });
        tx.onerror = (() => {
           console.log("Load transaction error")
        });
        console.log("Reading from db");
        const store = tx.objectStore("state");
        const out = await new Promise((resolve, reject) => {
            const req = store.get(1);
            req.onsuccess = ev => {
                console.log("Read data from db");
                resolve(ev.target.result?.state);
            }
            req.onerror = ev => reject(ev);
        });
        return out;
    }, (err) => {
        console.error(err);
    });
}

function dbOpen() {
    console.log("Opening db...")
    return new Promise((resolve, reject) => {

        const connection = indexedDB.open("state", 1);
        connection.onsuccess = ev => {
            console.log("Opened database");
            resolve(ev.target.result);
        }
        connection.onerror = ev => reject(ev);

        connection.onupgradeneeded = ev => {
            console.log("Upgrading database");
            const db = ev.target.result;
            const objectStore = db.createObjectStore("state", {keyPath: "id"});

            objectStore.transaction.oncomplete = ev => {
            }
        }
    });

}