/* eslint-disable no-restricted-globals */

import {clientsClaim} from 'workbox-core';

import {generateClient} from "aws-amplify/data"
import {Amplify} from "aws-amplify";
import outputs from "../amplify_outputs.json";

import authenticate, {signOutUser} from "./service-worker/authenticate";
import {loadData, saveData} from "./service-worker/data";
import {signOut} from "@aws-amplify/auth";

Amplify.configure(outputs);

// eslint-disable-next-line no-undef
importScripts('https://storage.googleapis.com/workbox-cdn/releases/6.5.3/workbox-sw.js');

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
// precacheAndRoute(self.__WB_MANIFEST);
// FIXME: Reenable precaching, it's a pain in the ass right now with handling injection of env into html.
const ignored = self.__WB_MANIFEST;

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
// registerRoute(
//   // Return false to exempt requests from being fulfilled by index.html.
//   ({ request, url }) => {
//     // If this isn't a navigation, skip.
//     if (request.mode !== 'navigate') {
//       return false;
//     } // If this is a URL that starts with /_, skip.
//
//     if (url.pathname.startsWith('/_')) {
//       return false;
//     } // If this looks like a URL for a resource, because it contains // a file extension, skip.
//
//     if (url.pathname.match(fileExtensionRegexp)) {
//       return false;
//     } // Return true to signal that we want to use the handler.
//
//     return true;
//   },
//   createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
// );

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
// registerRoute(
//   // Add in any other file extensions or routing criteria as needed.
//   ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
//   new StaleWhileRevalidate({
//     cacheName: 'images',
//     plugins: [
//       // Ensure that once this runtime cache reaches a maximum size the
//       // least-recently used images are removed.
//       new ExpirationPlugin({ maxEntries: 50 }),
//     ],
//   })
// );


const dataClient = generateClient();


self.addEventListener('message', async (event) => {
    console.log("message received", JSON.stringify(event.data));
    if (event.data)
        switch (event.data.type) {
            case 'SIGN_OUT':
                signOutUser(event);
                break;
            case 'AUTHENTICATE':
                authenticate(event)
                break;
            case 'SKIP_WAITING':
                self.skipWaiting();
                break;
            case 'LOAD_STATE':
                loadData(event)
                console.log("Loading data");
                break;
            case 'SAVE_STATE':
                console.log("Saving data");
                saveData(event);
                break;
            case 'SHOW_NOTIFICATION':
                // eslint-disable-next-line no-undef
                registration.showNotification("Test Task", {
                    body: "Hello World",
                    requireInteraction: true,
                    actions: [
                        {action: "complete", title: "Complete"},
                        {action: "snooze", title: "Snooze"},
                        {action: "cancel", title: "Cancel"}
                    ],
                    tag: "Hello World"
                });
                break;
        }
});

self.addEventListener('activate', (event) => {
    console.log("activated");
});

self.addEventListener('install', (event) => {
    console.log("installed");
});

self.addEventListener('notificationclick', event => {
    console.log("Notification click");
})

self.addEventListener('notificationclose', event => {
    console.log("Notification close");
})

// Any other custom service worker logic can go here.
// TODO: Background timers don't work offline in pwa right now!